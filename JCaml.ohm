JCaml {
    Program       =  Block
    Block         =  Stmt*
    Stmt          =  Decl | Exp | Print
                  |  "if" Exp Block
                     ("else if" Exp Block)*
                     ("else" Block)                             -- if

    Decl          =  "let" id "=" Exp                           -- decl
                  | FuncDec
    FuncDec       =  "let fun" id "=" Params "=>" returnType ":" Body  -- declFun

    Params        =  "(" Param ("," Param)* ")"
    Param         =  id
    returnType    =  id

    Body          =  ":" Block ";;"

    Exp           =  Exp relop MatchExp                         -- binary
                  |  MatchExp "?" MatchExp ":" MatchExp         -- ternary
                  |  MatchExp
    MatchExp      =  "match" id "with" "\n" Matches             -- matchexp
                  |  BinExp
    BinExp        =  BinExp binop AddExp                        -- binary
                  |  AddExp
    AddExp        =  AddExp addop MullExp                       -- binary
                  |  MullExp
    MullExp       =  MullExp mullop PrefixExp                   -- binary
                  |  PrefixExp
    PrefixExp     =  prefixop ExpoExp                           -- binary
                  |  ExpoExp
    ExpoExp       =  ParenExp expop ExpoExp                     -- binary
                  |  ParenExp
    ParenExp      =  "(" ParenExp ")"                           -- parens
                  |  numlit
                  |  Tuplit
                  |  List
                  |  stringlit

    Matches       =  ("|" Exp "->" Exp "\n")+

    keyword       =  "if" | "else" | "with" | "in" | "bool" | "int" | "String"
                  |  "double" | "float" | "long" | "list" | "hump" | "tuplit" | "spit" -- key

    prefixop      =  ~"--" "not" | "!" | "-" -- prefix


    id            =  ~keyword letter idrest*
    TupleElement  =  charlit | BinExp                           -- tupleElement
    Tuplit        =  "(" TupleElement "," TupleElement ")"
    List          =  "[]"
                  | "[" Tuplit ("," Tuplit)* "]"                -- list
                  | "[" char ("," char)* "]"                    -- list2
                  | "[" numlit ("," numlit)* "]"                -- list3
                  | "[" stringlit ("," stringlit)* "]"          -- list4
    Print         =  "spit" "(" BinExp ")"                   -- print
    idrest        =  "_" | alnum | "@" | "$"
    relop         =  ">" | ">=" | "==" | "!=" | "<" | "<="
    addop         =  "+" | "-" | "::"
    mullop        =  "*" | "/" | "%"
    expop         =  "^"
    binop         =  "||" | "or" | "&&" | "and"
    numlit        =  digit+
    char          =  escape
                  |  ~"\\" ~"\"" ~"\'" ~"\\n" any

    escape        = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t"
                  |  "\\u{" hexDigit+ "}"                       -- codepoint
    charlit       =  "'" (char | "\"") "'"
    stringlit     =  "\"" (char | "\'")* "\""
    comment       =  "##" (~"\n" any)* "\n"
}
