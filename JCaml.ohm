JCaml {
    Program       =  Block
    Block         =  (Stmt)*
    Stmt          =  Decl | Exp
                  |  "if" Exp Block
                     ("else if" Exp Block)*
                     ("else" Block)                             -- if

    Decl          =  "let" id "=" Exp                           -- decl
                  |  "let fun" id "=" Params "=>" returnType ":" Body -- declFun
    Params        =  "(" Param ("," Param)* ")"
    Param         =  id
    returnType    =  id

    Body          =  ":" Block ";;"

    Exp           =  Exp relop Exp1                             -- binary
                  |  Exp1 "?" Exp1 ":" Exp1                     -- ternary
                  |  Exp1
    Exp1          =  "match" id "with" "\n" Matches             -- matchexp
                  |  Exp2
    Exp2          =  Exp2 binop Exp3                            -- binary
                  |  Exp3
    Exp3          =  Exp3 addop Exp4                            -- binary
                  |  Exp4
    Exp4          =  Exp4 mullop Exp5                           -- binary
                  |  Exp5
    Exp5          =  prefixop Exp6                              -- binary
                  |  Exp6
    Exp6          =  Exp7 expop Exp6                            -- binary
                  |  Exp7
    Exp7          =  "(" Exp7 ")"                               -- parens
                  |  numlit
                  |  Tuplit
                  |  List 

    Matches       =  ("|" Exp "->" Exp "\n")+

    keyword       =  "if" | "else" | "with" | "in" | "bool" | "int" | "String"
                  |  "double" | "float" | "long" | "list" | "hump" | "tuplit" -- key

    prefixop      =  ~"--" "not" | "!" | "-" -- prefix

    id            =  ~keyword letter idrest*
    Tuplit        =  "(" Exp "," Exp ")"
    List          =  "[" (Exp ("," Exp))* "]"
    idrest        =  "_" | alnum | "@" | "$"
    relop         =  ">" | ">=" | "==" | "!=" | "<" | "<="
    addop         =  "+" | "-" | "::"
    mullop        =  "*" | "/" | "%"
    expop         =  "^"
    binop         =  "||" | "or" | "&&" | "and"
    numlit        =  digit+
    char          =  escape 
                  |  letter
    escape        =  "\""
                  |  "\n"
                  |  "'"
                  |  "\t"
                  | "\\"
                  | "\\u{" hexDigit hexDigit hexDigit hexDigit "}"       -- codepoint
    charlit       =  "'" (char | "\"") "'"
    stringlit     =  "\"" (char | "\'")* "\""
    comment       =  "##" (~"\n" any)* "\n"
}
