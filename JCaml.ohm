JCaml {
    Program       =  Block
    Block         =  (Stmt)*
    Stmt          =  Decl | id | Exp | stringlit | numlit
                  |  "if" Exp Block
                     ("else if" Exp Block)*
                     ("else" Block)                             -- if
                  |  Exp "?" Exp ";" Exp                        -- ternary

    Decl          =  "let" id "=" Exp                           -- decl
                  |  "let fun" id "=" Params "=>" returnVal ":" Body -- declFun
    Params        =  "(" Param ("," Param)* ")"
    Param         =  id
    returnVal     =  id

    Body          =  ":" Block ";;"
    Exp           =  "match" id "with" "\n" matches
    Exp1          =  Exp1 adlop Exp1                            -- binary
                  |  Exp1
    Exp2          =  Exp2 mullop Exp2                           -- binary
                  |  Exp2
    Exp3          =  prefixop Exp3                              -- binary
                  |  Exp3
    Exp4          =  Exp4 expops Exp4                           -- binary
                  |  Exp4
    Exp5          =  "(" Exp ")"                                -- parens

    matches       =  ("|" Exp "->" Exp "\n")+

    keyword       =  "if" | "else" | "with" | "in" | "bool" | "int" | "String"
                  |  "double" | "float" | "long" | "list" | "hump" | "tuplit" -- key

    prefixop      =  ~"--" "not" | "!" | "-" -- prefix

    id            =  ~keyword letter idrest*
    tuplit        =  "(" Exp "," Exp ")"
    list          =  "[" (Exp ("," Exp)*)* "]"
                  |  "[" (tuplit ("," tuplit)*)* "]"
                  |   Exp"::"list
    idrest        =  "_" | alnum | "@" | "$"
    relops        =  ">" | ">=" | "==" | "!=" | "<" | "<="
    adlop         =  "+" | "-"
    mullop        =  "*" | "/" | "%"
    expops        =  "^"
    parens        =  "(" Exp ")"
    binops        =  "||" | "or" | "&&" | "and"
    numlit        =  digit+
    char          =  escape
    escape        =  "\\""" | "\\n" | "\\'"
                  | "\\t" | "\\""" | "\\u{" hexDigit*4 "}"       -- codepoint
    charlit       =  "'" (char | "\"") "'"
    stringlit     =  "\"" (char | "\'")* "\""
    comment       =  "##" (~"\n" any)* "\n"
}
