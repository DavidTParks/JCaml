JCaml {
    Program       =  Block
    Block         =  Stmt*
    Stmt          =  Decl | Exp | Print | FuncCall | Return
                  |  "if" Exp Block
                     ("else if" Exp Block)*
                     ("else" Block)                             -- if

    Decl          =  "let" Type id "=" BinExp                   -- decl
                  |  FuncDec
    FuncDec       =  "let fun" id "=" Params "=>" (Type)* Body

    Type          =  "String" | "int" | "bool" | "char"

    FuncCall      =  id "(" Args ")"
    Arg           =  (id)?
    Args          =  ListOf<Arg, ",">

    Params        =  "(" (Param ("," Param)*)* ")"
    Param         =  id

    Body          =  ":" Block ";;"

    Exp           =  Exp relop MatchExp                         -- binary
                  |  MatchExp "?" MatchExp ":" MatchExp         -- ternary
                  |  MatchExp
    MatchExp      =  "match" id "with" Matches                  -- matchexp
                  |  BinExp
    BinExp        =  BinExp binop AddExp                        -- binary
                  |  AddExp
    AddExp        =  AddExp addop MullExp                       -- binary
                  |  MullExp
    MullExp       =  MullExp mullop PrefixExp                   -- binary
                  |  PrefixExp
    PrefixExp     =  prefixop ExpoExp                           -- binary
                  |  ExpoExp
    ExpoExp       =  ParenExp expop ExpoExp                     -- binary
                  |  ParenExp
    ParenExp      =  "(" ParenExp ")"                           -- parens
                  |  numlit
                  |  Tuplit
                  |  List
                  |  stringlit
                  |  Charlit

    Matches       =  ("|" Exp "->" Exp)+

    keyword       =  ("if" | "else" | "with" | "in" | "bool" | "int" | "String"
                  |  "double" | "float" | "long" | "list" | "hump" | "tuplit" | "spit") ~idrest

    prefixop      =  ~"--" "not" | "!" | "-"                    -- prefix

    id            =  ~keyword letter idrest*
    Tuplit        =  "(" BinExp "," BinExp ")"
    List          =  "[" BinExp ("," BinExp)* "]"               -- list
                  | "[]"
    Print         =  "spit" "(" BinExp ")"                      -- print
    Return        =  "hump" ParenExp
    idrest        =  "_" | alnum | "@" | "$"
    relop         =  ">" | ">=" | "==" | "!=" | "<" | "<="
    addop         =  "+" | "-" | "::"
    mullop        =  "*" | "/" | "%"
    expop         =  "^"
    binop         =  "||" | "or" | "&&" | "and"
    numlit        =  digit+
    char          =  escape
                  |  ~"\\" ~"\"" ~"\'" ~"\\n" any

    escape        = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\t"
                  |  "\\u{" hexDigit+ "}"                       -- codepoint
    Charlit       =  "'" (char | "\"") "'"
    stringlit     =  "\"" (char | "\'")* "\""

    space        := " " | "\t" | "\n" | "\r" | comment
    comment       =  "##" (~"\n" any)*
}
